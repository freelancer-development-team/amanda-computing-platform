%{
/*
 * Copyright (C) 2022 FreeLancer Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/// This file contains the lexical specification for the Amanda Programming
/// Language.
///
/// This lexer specification is made to work with the Bison 3.2(+) C++ generated
/// parser. Keep this in mind when introducing changes to the lexical
/// specification.
/// This specification is not fully Flex compatible, and it is intented to be
/// used as input to the RE/Flex scanner.
///

// C Standard Library
#include <cstdlib>
#include <cstdio>

// Compiler APIs
#include <amanda-c/Messages.h>
#include <amanda-vm/TypeSystem.h>

%}

%top{
    #include <amanda-c/Parser.h>            // Generated by Bison 3.2(+)
    #include <amanda-c/ParserLocations.h>   // Generated by Bison 3.2(+)
}

// Enable free-space mode in order to improve readability
%option freespace

// Scanner optimization level
%option fast

// Scanner class: amanda::compiler::Scanner
%option namespace=amanda::compiler
%option lexer=Scanner

// Scanner errors

// Bison 3.2(+) parser integration:
%option bison-complete
%option bison-locations
%option bison-cc-namespace=amanda::compiler
%option bison-cc-parser=DefaultParser

// Scanner class

// Character classes
digit                           [0-9]
alpha                           [A-Za-z_]
identifier                      {alpha} ( {alpha} | {digit} )*

%%

[[:space:]]+                    // skip white space
"#".*                           // ignore inline comment
"/*"(.|\n)*?"*/"                // ignore multi-line comment using a lazy regex pattern

"and"                           { return DefaultParser::symbol_type(DefaultParser::token::TOKEN_AND, location()); }
"namespace"                     { return DefaultParser::symbol_type(DefaultParser::token::TOKEN_NAMESPACE, location()); }

{identifier}                    { return DefaultParser::make_IDENTIFIER(amanda::core::String(text()), location()); }

<<EOF>>                         { return DefaultParser::make_EOF(location()); }

%%
