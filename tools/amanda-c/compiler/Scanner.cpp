// compiler/Scanner.cpp generated by reflex 3.2.1 from specs/scanner.l

#define REFLEX_VERSION "3.2.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_batch
#undef REFLEX_OPTION_bison
#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_flex
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_noyywrap
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_prefix

#define REFLEX_OPTION_batch               true
#define REFLEX_OPTION_bison               true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_header_file         "include/amanda-c/Scanner.h"
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           amanda::compiler
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "compiler/Scanner.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (1)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>

namespace amanda {
namespace compiler {

typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

} // namespace amanda
} // namespace compiler
#undef yytext
#undef yyleng
#undef yylineno

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace amanda {
namespace compiler {

class Scanner : public FlexLexer {
 public:
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream        *os    = NULL)
    :
      FlexLexer(input, os)
  {
  }
  virtual int yylex(void);
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

} // namespace amanda
} // namespace compiler

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "specs/scanner.l"

/*
 * Copyright (C) 2022 FreeLancer Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// C Standard Library


#line 23 "specs/scanner.l"
/* Options */

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON                                                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

amanda::compiler::Scanner YY_SCANNER;

#ifndef YY_EXTERN_C
#define YY_EXTERN_C
#endif

char *yytext;
yy_size_t yyleng;
int yylineno;

YY_EXTERN_C int yylex(void)
{
  int yylex_token = YY_SCANNER.yylex();
  yytext = const_cast<char*>(YY_SCANNER.YYText());
  yyleng = static_cast<yy_size_t>(YY_SCANNER.YYLeng());
  yylineno = static_cast<int>(YY_SCANNER.lineno());
  return yylex_token;
}

#define yytext const_cast<char*>(YY_SCANNER.YYText())
#define yyleng static_cast<yy_size_t>(YY_SCANNER.YYLeng())
#define yylineno static_cast<int>(YY_SCANNER.lineno())

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace amanda {
namespace compiler {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace amanda
} // namespace compiler

int amanda::compiler::Scanner::yylex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    matcher().buffer();
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule specs/scanner.l:28: . :
            YY_USER_ACTION
#line 28 "specs/scanner.l"
{ }

            YY_BREAK
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace amanda {
namespace compiler {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S3;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S3;
  return m.FSM_HALT(c1);

S3:
  m.FSM_TAKE(1);
  return m.FSM_HALT();
}

} // namespace amanda

} // namespace compiler

