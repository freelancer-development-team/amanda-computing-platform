// compiler/Scanner.cpp generated by reflex 3.2.1 from specs/scanner.l

#define REFLEX_VERSION "3.2.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_YYLTYPE
#undef REFLEX_OPTION_YYSTYPE
#undef REFLEX_OPTION_batch
#undef REFLEX_OPTION_bison_cc
#undef REFLEX_OPTION_bison_cc_namespace
#undef REFLEX_OPTION_bison_cc_parser
#undef REFLEX_OPTION_bison_complete
#undef REFLEX_OPTION_bison_locations
#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_token_eof
#undef REFLEX_OPTION_token_type

#define REFLEX_OPTION_YYLTYPE             amanda::compiler::location
#define REFLEX_OPTION_YYSTYPE             amanda::compiler::DefaultParser::semantic_type
#define REFLEX_OPTION_batch               true
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  amanda::compiler
#define REFLEX_OPTION_bison_cc_parser     DefaultParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "include/amanda-c/Scanner.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           amanda::compiler
#define REFLEX_OPTION_outfile             "compiler/Scanner.cpp"
#define REFLEX_OPTION_token_eof           amanda::compiler::DefaultParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          amanda::compiler::DefaultParser::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 39 "specs/scanner.l"

    #include <amanda-c/Parser.h>            // Generated by Bison 3.2(+)
    #include <amanda-c/ParserLocations.h>   // Generated by Bison 3.2(+)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace amanda {
namespace compiler {

class Scanner : public reflex::AbstractLexer<reflex::Matcher> {
#line 63 "specs/scanner.l"

    public:

        typedef DefaultParser::token    Tokens;

    protected:

        typedef struct Keyword
        {
            const char* name;
            int token;
        } Keyword;

    int getKeyWordToken(const char* str)
    {
        #define TOKEN(x)    DefaultParser::token::TOKEN_ ## x

        int result = 0;

        static const Keyword kwds[] =
        {
            { "break",      TOKEN(BREAK)        },
            { "case",       TOKEN(CASE)         },
            { "class",      TOKEN(CLASS)        },
            { "do",         TOKEN(DO)           },
            { "else",       TOKEN(ELSE)         },
            { "for",        TOKEN(FOR)          },
            { "if",         TOKEN(IF)           },
            { "interface",  TOKEN(INTERFACE)    },
            { "namespace",  TOKEN(NAMESPACE)    },
            { "switch",     TOKEN(SWITCH)       },
            { "return",     TOKEN(RETURN)       },
            { "using",      TOKEN(USING)        },
            { "while",      TOKEN(WHILE)        },
            // Data types
            { "void",       TOKEN(VOID) },
            { "bool",       TOKEN(BOOL) },
            { "int",        TOKEN(INT) },
            { "long",       TOKEN(LONG) },
            { "string",     TOKEN(STRING) },
            { "char",       TOKEN(CHAR) },
            { "float",      TOKEN(FLOAT) },
            { "double",     TOKEN(DOUBLE) },
            { NULL, 0 }
        };

        for (const Keyword* kwd = &kwds[0]; kwd->name != NULL; ++kwd)
        {
            if (::strcmp(kwd->name, str) == 0)
            {
                result = kwd->token;
                break;
            }
        }

        #undef TOKEN

        return result;
    }

    DefaultParser::symbol_type token(int id)
    {
        return DefaultParser::symbol_type(id, location());
    }

    DefaultParser::symbol_type integerLiteral()
    {
        return DefaultParser::make_INTEGER(text(), location());
    }

    void scannerException();

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual amanda::compiler::location location(void)
  {
    amanda::compiler::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual amanda::compiler::DefaultParser::symbol_type lex(void);
};

} // namespace amanda
} // namespace compiler

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "specs/scanner.l"

/*
 * Copyright (C) 2022 FreeLancer Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/// This file contains the lexical specification for the Amanda Programming
/// Language.
///
/// This lexer specification is made to work with the Bison 3.2(+) C++ generated
/// parser. Keep this in mind when introducing changes to the lexical
/// specification.
/// This specification is not fully Flex compatible, and it is intented to be
/// used as input to the RE/Flex scanner.
///

// C Standard Library
#include <cstdlib>
#include <cstdio>

// Compiler APIs
#include <amanda-c/Messages.h>
#include <amanda-vm/TypeSystem.h>


#line 44 "specs/scanner.l"
// Enable free-space mode in order to improve readability
#line 47 "specs/scanner.l"
// Scanner optimization level
#line 50 "specs/scanner.l"
// Scanner class: amanda::compiler::Scanner
#line 54 "specs/scanner.l"
// Scanner errors

#line 56 "specs/scanner.l"
// Bison 3.2(+) parser integration:
#line 62 "specs/scanner.l"
// Scanner class
#line 136 "specs/scanner.l"
// Character classes

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace amanda {
namespace compiler {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace amanda
} // namespace compiler

amanda::compiler::DefaultParser::symbol_type amanda::compiler::Scanner::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    matcher().buffer();
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 192 "specs/scanner.l"
{ return DefaultParser::make_EOF(location()); }
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule specs/scanner.l:147: [[:space:]]+ :
#line 147 "specs/scanner.l"
// skip white space
            break;
          case 2: // rule specs/scanner.l:148: "#".* :
#line 148 "specs/scanner.l"
// ignore inline comment
            break;
          case 3: // rule specs/scanner.l:149: "/*"(.|\n)*?"*/" :
#line 149 "specs/scanner.l"
// ignore multi-line comment using a lazy regex pattern

            break;
          case 4: // rule specs/scanner.l:151: {identifier} :
#line 151 "specs/scanner.l"
{   int token = getKeyWordToken(text());
                                    return token ?
                                            DefaultParser::symbol_type(token, location())
                                        :   DefaultParser::make_IDENTIFIER(amanda::core::String(text()), location());
                                }
            break;
          case 5: // rule specs/scanner.l:156: {integer_literal} :
#line 156 "specs/scanner.l"
{ return integerLiteral(); }

            break;
          case 6: // rule specs/scanner.l:158: "{" :
#line 158 "specs/scanner.l"
{ return token('{'); }
            break;
          case 7: // rule specs/scanner.l:159: "}" :
#line 159 "specs/scanner.l"
{ return token('}'); }
            break;
          case 8: // rule specs/scanner.l:160: "(" :
#line 160 "specs/scanner.l"
{ return token('('); }
            break;
          case 9: // rule specs/scanner.l:161: ")" :
#line 161 "specs/scanner.l"
{ return token(')'); }
            break;
          case 10: // rule specs/scanner.l:162: "[" :
#line 162 "specs/scanner.l"
{ return token('['); }
            break;
          case 11: // rule specs/scanner.l:163: "]" :
#line 163 "specs/scanner.l"
{ return token(']'); }

            break;
          case 12: // rule specs/scanner.l:165: ":" :
#line 165 "specs/scanner.l"
{ return token(':'); }
            break;
          case 13: // rule specs/scanner.l:166: "," :
#line 166 "specs/scanner.l"
{ return token(','); }
            break;
          case 14: // rule specs/scanner.l:167: ";" :
#line 167 "specs/scanner.l"
{ return token(';'); }
            break;
          case 15: // rule specs/scanner.l:168: "." :
#line 168 "specs/scanner.l"
{ return token('.'); }
            break;
          case 16: // rule specs/scanner.l:169: "::" :
#line 169 "specs/scanner.l"
{ return token(Tokens::TOKEN_SCOPE_OP); }

            break;
          case 17: // rule specs/scanner.l:171: "<=" :
#line 171 "specs/scanner.l"
{ return token(Tokens::TOKEN_LE); }
            break;
          case 18: // rule specs/scanner.l:172: ">=" :
#line 172 "specs/scanner.l"
{ return token(Tokens::TOKEN_GE); }
            break;
          case 19: // rule specs/scanner.l:173: ">" :
#line 173 "specs/scanner.l"
{ return token('>'); }
            break;
          case 20: // rule specs/scanner.l:174: "<" :
#line 174 "specs/scanner.l"
{ return token('<'); }
            break;
          case 21: // rule specs/scanner.l:175: "==" :
#line 175 "specs/scanner.l"
{ return token(Tokens::TOKEN_EQ); }
            break;
          case 22: // rule specs/scanner.l:176: "!=" :
#line 176 "specs/scanner.l"
{ return token(Tokens::TOKEN_NEQ); }

            break;
          case 23: // rule specs/scanner.l:178: "=" :
#line 178 "specs/scanner.l"
{ return token('='); }
            break;
          case 24: // rule specs/scanner.l:179: "++" :
#line 179 "specs/scanner.l"
{ return token(Tokens::TOKEN_PLUSPLUS); }
            break;
          case 25: // rule specs/scanner.l:180: "--" :
#line 180 "specs/scanner.l"
{ return token(Tokens::TOKEN_MINUSMINUS); }

            break;
          case 26: // rule specs/scanner.l:182: "+" :
#line 182 "specs/scanner.l"
{ return token('+'); }
            break;
          case 27: // rule specs/scanner.l:183: "-" :
#line 183 "specs/scanner.l"
{ return token('-'); }
            break;
          case 28: // rule specs/scanner.l:184: "/" :
#line 184 "specs/scanner.l"
{ return token('/'); }
            break;
          case 29: // rule specs/scanner.l:185: "*" :
#line 185 "specs/scanner.l"
{ return token('*'); }
            break;
          case 30: // rule specs/scanner.l:186: "%" :
#line 186 "specs/scanner.l"
{ return token('%'); }
            break;
          case 31: // rule specs/scanner.l:187: "&" :
#line 187 "specs/scanner.l"
{ return token('&'); }
            break;
          case 32: // rule specs/scanner.l:188: "|" :
#line 188 "specs/scanner.l"
{ return token('|'); }
            break;
          case 33: // rule specs/scanner.l:189: "~" :
#line 189 "specs/scanner.l"
{ return token('~'); }
            break;
          case 34: // rule specs/scanner.l:190: "^" :
#line 190 "specs/scanner.l"
{ return token('^'); }

            break;
          case 35: // rule specs/scanner.l:193: . :
#line 193 "specs/scanner.l"
{ scannerException(); }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 196 "specs/scanner.l"

#include <amanda-c/ParserLocations.h>
#include <amanda-vm/Frontend/LexerException.h>

namespace amanda
{
namespace compiler
{

void Scanner::scannerException()
{
    const amanda::compiler::location& loc = location();

    int l_begin = loc.begin.line;
    int l_end = loc.end.line;
    int c_begin = loc.begin.column;
    int c_end = loc.end.column;

    log::error("%s:%d:%d: unrecognized token: '%s'. (from %d:%d to %d:%d)",
                loc.begin.filename->c_str(),
                l_begin, c_begin,
                text(), l_begin, c_begin, l_end, c_end);

    throw amanda::frontend::LexerException();
}

}
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace amanda {
namespace compiler {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '~') goto S94;
  if (c1 == '}') goto S47;
  if (c1 == '|') goto S92;
  if (c1 == '{') goto S45;
  if ('a' <= c1 && c1 <= 'z') goto S39;
  if (c1 == '_') goto S39;
  if (c1 == '^') goto S96;
  if (c1 == ']') goto S55;
  if (c1 == '[') goto S53;
  if ('A' <= c1 && c1 <= 'Z') goto S39;
  if (c1 == '>') goto S69;
  if (c1 == '=') goto S72;
  if (c1 == '<') goto S66;
  if (c1 == ';') goto S62;
  if (c1 == ':') goto S57;
  if ('0' <= c1 && c1 <= '9') goto S108;
  if (c1 == '/') goto S36;
  if (c1 == '.') goto S64;
  if (c1 == '-') goto S82;
  if (c1 == ',') goto S60;
  if (c1 == '+') goto S78;
  if (c1 == '*') goto S86;
  if (c1 == ')') goto S51;
  if (c1 == '(') goto S49;
  if (c1 == '&') goto S90;
  if (c1 == '%') goto S88;
  if (c1 == '#') goto S32;
  if (c1 == '!') goto S75;
  if (c1 == ' ') goto S100;
  if (c1 == '\n') goto S104;
  if ('\t' <= c1 && c1 <= '\r') goto S100;
  if (0 <= c1) goto S98;
  return m.FSM_HALT(c1);

S32:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S111;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S111;
  return m.FSM_HALT(c1);

S36:
  m.FSM_TAKE(28);
  c1 = m.FSM_CHAR();
  if (c1 == '*') goto S115;
  return m.FSM_HALT(c1);

S39:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S117;
  if (c1 == '_') goto S117;
  if ('A' <= c1 && c1 <= 'Z') goto S117;
  if ('0' <= c1 && c1 <= '9') goto S117;
  return m.FSM_HALT(c1);

S45:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S47:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S49:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S51:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S53:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S55:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S57:
  m.FSM_TAKE(12);
  c1 = m.FSM_CHAR();
  if (c1 == ':') goto S123;
  return m.FSM_HALT(c1);

S60:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S62:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S64:
  m.FSM_TAKE(15);
  return m.FSM_HALT();

S66:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S125;
  return m.FSM_HALT(c1);

S69:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S127;
  return m.FSM_HALT(c1);

S72:
  m.FSM_TAKE(23);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S129;
  return m.FSM_HALT(c1);

S75:
  m.FSM_TAKE(35);
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S131;
  return m.FSM_HALT(c1);

S78:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S135;
  if (c1 == '+') goto S133;
  return m.FSM_HALT(c1);

S82:
  m.FSM_TAKE(27);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S135;
  if (c1 == '-') goto S138;
  return m.FSM_HALT(c1);

S86:
  m.FSM_TAKE(29);
  return m.FSM_HALT();

S88:
  m.FSM_TAKE(30);
  return m.FSM_HALT();

S90:
  m.FSM_TAKE(31);
  return m.FSM_HALT();

S92:
  m.FSM_TAKE(32);
  return m.FSM_HALT();

S94:
  m.FSM_TAKE(33);
  return m.FSM_HALT();

S96:
  m.FSM_TAKE(34);
  return m.FSM_HALT();

S98:
  m.FSM_TAKE(35);
  return m.FSM_HALT();

S100:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S104;
  if ('\t' <= c1 && c1 <= '\r') goto S104;
  return m.FSM_HALT(c1);

S104:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S104;
  if ('\t' <= c1 && c1 <= '\r') goto S104;
  return m.FSM_HALT(c1);

S108:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S135;
  return m.FSM_HALT(c1);

S111:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S111;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S111;
  return m.FSM_HALT(c1);

S115:
  c1 = m.FSM_CHAR();
  if (c1 == '*') goto S140;
  if (0 <= c1) goto S143;
  return m.FSM_HALT(c1);

S117:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S117;
  if (c1 == '_') goto S117;
  if ('A' <= c1 && c1 <= 'Z') goto S117;
  if ('0' <= c1 && c1 <= '9') goto S117;
  return m.FSM_HALT(c1);

S123:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S125:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S127:
  m.FSM_TAKE(18);
  return m.FSM_HALT();

S129:
  m.FSM_TAKE(21);
  return m.FSM_HALT();

S131:
  m.FSM_TAKE(22);
  return m.FSM_HALT();

S133:
  m.FSM_TAKE(24);
  return m.FSM_HALT();

S135:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S135;
  return m.FSM_HALT(c1);

S138:
  m.FSM_TAKE(25);
  return m.FSM_HALT();

S140:
  c1 = m.FSM_CHAR();
  if (c1 == '/') goto S145;
  if (c1 == '*') goto S147;
  if (0 <= c1) goto S143;
  return m.FSM_HALT(c1);

S143:
  c1 = m.FSM_CHAR();
  if (c1 == '*') goto S147;
  if (0 <= c1) goto S143;
  return m.FSM_HALT(c1);

S145:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S147:
  c1 = m.FSM_CHAR();
  if (c1 == '/') goto S150;
  if (c1 == '*') goto S147;
  if (0 <= c1) goto S143;
  return m.FSM_HALT(c1);

S150:
  m.FSM_TAKE(3);
  return m.FSM_HALT();
}

} // namespace amanda

} // namespace compiler

