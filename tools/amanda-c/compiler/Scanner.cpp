// compiler/Scanner.cpp generated by reflex 3.2.1 from specs/scanner.l

#define REFLEX_VERSION "3.2.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_YYLTYPE
#undef REFLEX_OPTION_YYSTYPE
#undef REFLEX_OPTION_batch
#undef REFLEX_OPTION_bison_cc
#undef REFLEX_OPTION_bison_cc_namespace
#undef REFLEX_OPTION_bison_cc_parser
#undef REFLEX_OPTION_bison_complete
#undef REFLEX_OPTION_bison_locations
#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_token_eof
#undef REFLEX_OPTION_token_type

#define REFLEX_OPTION_YYLTYPE             amanda::compiler::location
#define REFLEX_OPTION_YYSTYPE             amanda::compiler::DefaultParser::semantic_type
#define REFLEX_OPTION_batch               true
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  amanda::compiler
#define REFLEX_OPTION_bison_cc_parser     DefaultParser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "include/amanda-c/Scanner.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           amanda::compiler
#define REFLEX_OPTION_outfile             "compiler/Scanner.cpp"
#define REFLEX_OPTION_token_eof           amanda::compiler::DefaultParser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          amanda::compiler::DefaultParser::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 39 "specs/scanner.l"

    #include <amanda-c/Parser.h>            // Generated by Bison 3.2(+)
    #include <amanda-c/ParserLocations.h>   // Generated by Bison 3.2(+)


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace amanda {
namespace compiler {

class Scanner : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual amanda::compiler::location location(void)
  {
    amanda::compiler::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual amanda::compiler::DefaultParser::symbol_type lex(void);
};

} // namespace amanda
} // namespace compiler

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "specs/scanner.l"

/*
 * Copyright (C) 2022 FreeLancer Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/// This file contains the lexical specification for the Amanda Programming
/// Language.
///
/// This lexer specification is made to work with the Bison 3.2(+) C++ generated
/// parser. Keep this in mind when introducing changes to the lexical
/// specification.
/// This specification is not fully Flex compatible, and it is intented to be
/// used as input to the RE/Flex scanner.
///

// C Standard Library
#include <cstdlib>
#include <cstdio>

// Compiler APIs
#include <amanda-c/Messages.h>
#include <amanda-vm/TypeSystem.h>


#line 44 "specs/scanner.l"
// Enable free-space mode in order to improve readability
#line 47 "specs/scanner.l"
// Scanner optimization level
#line 50 "specs/scanner.l"
// Scanner class: amanda::compiler::Scanner
#line 54 "specs/scanner.l"
// Scanner errors

#line 56 "specs/scanner.l"
// Bison 3.2(+) parser integration:
#line 62 "specs/scanner.l"
// Scanner class

#line 64 "specs/scanner.l"
// Character classes

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace amanda {
namespace compiler {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace amanda
} // namespace compiler

amanda::compiler::DefaultParser::symbol_type amanda::compiler::Scanner::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    matcher().buffer();
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 80 "specs/scanner.l"
{ return DefaultParser::make_EOF(location()); }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule specs/scanner.l:71: [[:space:]]+ :
#line 71 "specs/scanner.l"
// skip white space
            break;
          case 2: // rule specs/scanner.l:72: "#".* :
#line 72 "specs/scanner.l"
// ignore inline comment
            break;
          case 3: // rule specs/scanner.l:73: "/*"(.|\n)*?"*/" :
#line 73 "specs/scanner.l"
// ignore multi-line comment using a lazy regex pattern

            break;
          case 4: // rule specs/scanner.l:75: "and" :
#line 75 "specs/scanner.l"
{ return DefaultParser::symbol_type(DefaultParser::token::TOKEN_AND, location()); }
            break;
          case 5: // rule specs/scanner.l:76: "namespace" :
#line 76 "specs/scanner.l"
{ return DefaultParser::symbol_type(DefaultParser::token::TOKEN_NAMESPACE, location()); }

            break;
          case 6: // rule specs/scanner.l:78: {identifier} :
#line 78 "specs/scanner.l"
{ return DefaultParser::make_IDENTIFIER(amanda::core::String(text()), location()); }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace amanda {
namespace compiler {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S23;
  if ('b' <= c1 && c1 <= 'z') goto S30;
  if (c1 == 'a') goto S16;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if (c1 == '/') goto S14;
  if (c1 == '#') goto S10;
  if (c1 == ' ') goto S36;
  if ('\t' <= c1 && c1 <= '\r') goto S36;
  return m.FSM_HALT(c1);

S10:
  m.FSM_TAKE(2);
  c1 = m.FSM_CHAR();
  if ('\v' <= c1) goto S10;
  if ('\n' <= c1) return m.FSM_HALT(c1);
  if (0 <= c1 && c1 <= '\t') goto S10;
  return m.FSM_HALT(c1);

S14:
  c1 = m.FSM_CHAR();
  if (c1 == '*') goto S40;
  return m.FSM_HALT(c1);

S16:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S42;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S23:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S30;
  if (c1 == 'a') goto S49;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S30:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S36:
  m.FSM_TAKE(1);
  c1 = m.FSM_CHAR();
  if (c1 == ' ') goto S36;
  if ('\t' <= c1 && c1 <= '\r') goto S36;
  return m.FSM_HALT(c1);

S40:
  c1 = m.FSM_CHAR();
  if (c1 == '*') goto S56;
  if (0 <= c1) goto S59;
  return m.FSM_HALT(c1);

S42:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S61;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S49:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'm') goto S67;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S56:
  c1 = m.FSM_CHAR();
  if (c1 == '/') goto S74;
  if (c1 == '*') goto S76;
  if (0 <= c1) goto S59;
  return m.FSM_HALT(c1);

S59:
  c1 = m.FSM_CHAR();
  if (c1 == '*') goto S76;
  if (0 <= c1) goto S59;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(4);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S67:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S79;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S74:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S76:
  c1 = m.FSM_CHAR();
  if (c1 == '/') goto S86;
  if (c1 == '*') goto S76;
  if (0 <= c1) goto S59;
  return m.FSM_HALT(c1);

S79:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S88;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S86:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S88:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S95;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S95:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if ('b' <= c1 && c1 <= 'z') goto S30;
  if (c1 == 'a') goto S102;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S102:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S109;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S109:
  m.FSM_TAKE(6);
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S116;
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);

S116:
  m.FSM_TAKE(5);
  c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S30;
  if (c1 == '_') goto S30;
  if ('A' <= c1 && c1 <= 'Z') goto S30;
  if ('0' <= c1 && c1 <= '9') goto S30;
  return m.FSM_HALT(c1);
}

} // namespace amanda

} // namespace compiler

