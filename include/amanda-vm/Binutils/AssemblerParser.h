/*
 * Copyright (C) 2022 FreeLancer Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* 
 * File:   AssemblerParser.h
 * Author: Javier Marrero
 *
 * Created on April 12, 2022, 2:10 AM
 */

#ifndef ASSEMBLERPARSER_H
#define ASSEMBLERPARSER_H

#include <amanda-vm/TypeSystem.h>
#include <amanda-vm/Logging/Logger.h>
#include <amanda-vm/Binutils/AssemblerLexer.h>
#include <amanda-vm/Binutils/Input.h>
#include <amanda-vm/Binutils/Module.h>
#include <amanda-vm/Binutils/Section.h>
#include <amanda-vm/Binutils/Function.h>
#include <amanda-vm/Binutils/DataObject.h>

#include <vector>

namespace amanda
{
namespace binutils
{
namespace as
{

/**
 * This class handles the syntax analysis & transformation into binary assembled
 * code. It is supported by the reentrant C parser generated by GNU Bison & by
 * the lexical scanner generated by Flex.
 *
 * @author J. Marrero
 */
class AssemblerParser : public core::Object
{

    AMANDA_OBJECT(AssemblerParser, core::Object)
public:

    /**
     * This structure holds the parser internal state.
     */
    typedef struct YYPSTATE
    {
        Function*   currentFunction;
        DataObject* currentObject;
        Section*    currentSection;
        size_t      localOffset;
    } YYPSTATE;

    AssemblerParser(const AssemblerInputStream& stream);

    virtual Module* parse() const;

private:

    core::StrongReference<logging::Logger>  logger;
    AssemblerLexer                          scanner;
    mutable YYPSTATE                        state;

} ;

}
}
}

#endif /* ASSEMBLERPARSER_H */

