/*
 * Copyright (C) 2022 FreeLancer Development Team
 * This file is part of the Amanda Computing Platform project.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
  
.section ".code"

# References to the native methods
.native $c!!puts@i32@p
.native $c!!putchar@i32@i32
.native $c!!getchar@i32@nil
.native $c!!clock@i32@nil

# This is the main function for this test program.
.def @@main?A_string@!l32
	alloc	$4
	
.fl:
	# invoke	pause

	# push	a64 $0
	# sload	$4
	# push	l32 $2
	# add		l32
	# invoke	simple_loop
	
	push	a64 $0
	sload	$4
	push	l32 $1
	add		l32
	dup		l32
	
	push	a64 $0
	sstore	$4
	
	push	l32 $100
	clt		l32
	jt		.fl
	
	iload	str1
	invoke	slowprint
	
	# Pause and return
	invoke	pause
	push	l32 $0
	ret		l32
.endef

.def factorial
	dup		l32
	push	l32 $2
	clt		l32
	jt		.end
	dup		l32
	push	l32 $1
	sub		l32
	invoke	factorial
	mul		l32
.end:
	ret		l32
.endef

.def simple_loop
	push	l32 $0
.loop:
	push	a64 $0
	sload	$4
	push	l32 $1
	add		l32
	
	dup		l32
	push	l32 $1000
	clt		l32
	jf		.end
	
	push	a64 $0
	sstore	$4
	
	jmp		.loop
.end:
	ret 	v0
.endef

.def just_return
	ret v0
.endef

.def pause
	ccall	$c!!getchar@i32@nil
	ret		v0
.endef

.def slowprint
	# Arguments:
	# $0	- a pointer to a unicode string representing the string to print
	push	a64 $-8
	sload	$8					# $0 contains a pointer
	push	q64 $0				# $8 index to offset	
	
.loop:	
	# Load the variables and add them
	# Load the offset first
	push	a64 $0
	sload	$8
	# Load the offset
	push	a64 $8
	sload	$8
	
	add		q64					# sum the two variables
	load	$1					# load the character
	b2l							# convert it to a 32bit integer
	
	dup		l32					# duplicate the value
	push 	l32 $0				# push ''
	ceq		l32					# compare if the character is the terminator
	jt		.end				# if true jump to the end of the function
	
	ccall 	$c!!putchar@i32@i32 # call the putchar C function
	pop		l32					# discard the return value of the function
	
	push	a64 $8				# push the address of the offset
	sload	$8					# load the offset 
	push	q64 $1				# push 1
	add		q64					# add one to the offset
	
	push	a64 $8				# push the first variable address
	sstore	$8					# write the summed index
	
	invoke	delay				# delay 1s the character
	jmp		.loop				# repeat the loop
	
.end:
	pop		q64					# clear the argument
	ret		v0
.endef

.def delay
	ccall	$c!!clock@i32@nil	# start_time = clock()
	push	l32 $110			# 0.11s delay
	add		l32					# $0 - now contains the start time + delay
	
.L1:
	ccall	$c!!clock@i32@nil	# clock()
	
	push	a64 $0				# push the address of $0
	sload	$4					# load the variable at $0
	
	clt		l32					# clock() < start_time + delay
	jt		.L1					# jump to .L1 if the condition holds
		
	ret		v0
.endef

.section ".data"

.local str1: .unicode "Hola Tachiri, te están quemando!!\n"
